# PowerShell Agent Job Example
# Demonstrates PowerShell script execution on Windows agents

steps:
  - name: PowerShell System Information
    action: powershell
    script: |
      Write-Host "üñ•Ô∏è  PowerShell Agent Job Started" -ForegroundColor Green
      Write-Host "Agent ID: $env:AGENT_ID" -ForegroundColor Cyan
      Write-Host "Job ID: $env:JOB_ID" -ForegroundColor Cyan
      Write-Host "Hostname: $env:AGENT_HOSTNAME" -ForegroundColor Cyan
      
      # Get system information
      Write-Host "`nüìä System Information:" -ForegroundColor Yellow
      $computerInfo = Get-ComputerInfo | Select-Object WindowsProductName, TotalPhysicalMemory, CsProcessors
      Write-Host "OS: $($computerInfo.WindowsProductName)"
      Write-Host "Memory: $([math]::Round($computerInfo.TotalPhysicalMemory / 1GB, 2)) GB"
      Write-Host "Processors: $($computerInfo.CsProcessors.Count)"
      
      # Check disk space
      Write-Host "`nüíæ Disk Space:" -ForegroundColor Yellow
      Get-WmiObject -Class Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | ForEach-Object {
          $freeGB = [math]::Round($_.FreeSpace / 1GB, 2)
          $totalGB = [math]::Round($_.Size / 1GB, 2)
          $percentFree = [math]::Round(($_.FreeSpace / $_.Size) * 100, 1)
          Write-Host "Drive $($_.DeviceID) - $freeGB GB free of $totalGB GB ($percentFree% free)"
      }
      
      Write-Host "`n‚úÖ PowerShell system check completed!" -ForegroundColor Green
    timeout: 120

  - name: PowerShell File Operations
    action: powershell
    script: |
      Write-Host "üìÅ PowerShell File Operations" -ForegroundColor Green
      
      # Create working directory
      $workDir = ".\temp_powershell_job"
      if (!(Test-Path $workDir)) {
          New-Item -ItemType Directory -Path $workDir -Force | Out-Null
          Write-Host "Created directory: $workDir"
      }
      
      # Create sample files
      Write-Host "`nüìù Creating sample files..."
      1..5 | ForEach-Object {
          $fileName = "$workDir\sample_file_$_.txt"
          "Sample content for file $_ - Generated by $env:AGENT_ID at $(Get-Date)" | Out-File $fileName
          Write-Host "Created: $fileName"
      }
      
      # List created files
      Write-Host "`nüìã Files created:"
      Get-ChildItem $workDir | ForEach-Object {
          $size = [math]::Round($_.Length / 1KB, 2)
          Write-Host "  $($_.Name) - $size KB"
      }
      
      # Create a summary report
      $report = @{
          Agent = $env:AGENT_ID
          JobId = $env:JOB_ID
          Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          FilesCreated = (Get-ChildItem $workDir).Count
          WorkingDirectory = (Get-Location).Path
          PowerShellVersion = $PSVersionTable.PSVersion.ToString()
      }
      
      $reportPath = "$workDir\powershell_job_report.json"
      $report | ConvertTo-Json | Out-File $reportPath
      Write-Host "`nüìä Report saved to: $reportPath"
      
      Write-Host "`n‚úÖ PowerShell file operations completed!" -ForegroundColor Green
    timeout: 180

  - name: PowerShell Process Management
    action: powershell
    script: |
      Write-Host "‚öôÔ∏è  PowerShell Process Management" -ForegroundColor Green
      
      # Get running processes summary
      Write-Host "`nüîÑ Process Summary:"
      $processes = Get-Process
      $processCount = $processes.Count
      $totalMemoryMB = [math]::Round(($processes | Measure-Object WorkingSet -Sum).Sum / 1MB, 2)
      
      Write-Host "Total Processes: $processCount"
      Write-Host "Total Memory Usage: $totalMemoryMB MB"
      
      # Top 5 processes by memory usage
      Write-Host "`nüîù Top 5 Processes by Memory:"
      $processes | Sort-Object WorkingSet -Descending | Select-Object -First 5 | ForEach-Object {
          $memoryMB = [math]::Round($_.WorkingSet / 1MB, 2)
          Write-Host "  $($_.Name): $memoryMB MB"
      }
      
      # Get Windows services status
      Write-Host "`nüõ†Ô∏è  Critical Windows Services:"
      $criticalServices = @("Spooler", "Themes", "AudioEndpointBuilder", "Dhcp")
      foreach ($serviceName in $criticalServices) {
          $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
          if ($service) {
              $status = if ($service.Status -eq "Running") { "‚úÖ" } else { "‚ùå" }
              Write-Host "  $serviceName: $($service.Status) $status"
          }
      }
      
      Write-Host "`n‚úÖ Process management check completed!" -ForegroundColor Green
    timeout: 120

  - name: PowerShell Cleanup
    action: powershell
    script: |
      Write-Host "üßπ PowerShell Cleanup" -ForegroundColor Green
      
      # Clean up temporary files
      $workDir = ".\temp_powershell_job"
      if (Test-Path $workDir) {
          Write-Host "Cleaning up temporary directory: $workDir"
          Remove-Item $workDir -Recurse -Force
          Write-Host "‚úÖ Cleanup completed!"
      } else {
          Write-Host "‚ÑπÔ∏è  No cleanup needed - directory not found"
      }
      
      # Final summary
      Write-Host "`nüéâ PowerShell Agent Job Summary:" -ForegroundColor Yellow
      Write-Host "  Agent: $env:AGENT_ID"
      Write-Host "  Job: $env:JOB_ID"
      Write-Host "  Completed: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
      Write-Host "  Status: SUCCESS ‚úÖ"
      
      Write-Host "`nüöÄ PowerShell agent job completed successfully!" -ForegroundColor Green
    timeout: 60